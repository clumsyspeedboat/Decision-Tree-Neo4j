tree1 <- rpart(DEATH_EVENT ~. ,data=TrainingSet, method = "rpart", trControl = train.control, parms=list(split="gini"))
tree1 <- rpart(DEATH_EVENT ~. ,data=TrainingSet, type = "rpart", trControl = train.control, parms=list(split="gini"))
train.control <- trainControl(method = 'cv', number = 10)
tree1 <- rpart(DEATH_EVENT ~. ,data=TrainingSet, type = "rpart", trControl = train.control, parms=list(split="gini"))
tree1 <- rpart(DEATH_EVENT ~. ,data=TrainingSet, method = "cv", trControl = train.control, parms=list(split="gini"))
tree1 <- rpart(DEATH_EVENT ~. ,data=TrainingSet, trControl = train.control, parms=list(split="gini"))
tree1 <- rpart(DEATH_EVENT ~. ,data=TrainingSet, trControl = train.control)
tree1 <- rpart(DEATH_EVENT ~. , method = "cv", type = "class", data=TrainingSet, trControl = train.control)
tree1 <- rpart(DEATH_EVENT ~. , data=TrainingSet, method = "cv", type = "class", trControl = train.control)
data1 <- file.choose()
data1
data_matrix <- read.csv(data1, header = TRUE, sep = ",")
library("ggplot2")
library("caret")
library("factoextra")
library("FSelector")
library("DescTools")
library("rpart")
library("rpart.plot")
library("C50")
library("RWeka")
accuracy = vector("numeric",30)
time = vector("numeric",30)
for (i in 1:2) {
options(digits.secs = 6)
start.time1 <- Sys.time()
train.control <- trainControl(method = 'cv', number = 20)
tree1 <- train(DEATH_EVENT ~. ,data = data_matrix, method = "rpart", trControl = train.control, parms=list(split="gini"))
end.time1 <- Sys.time()
plot(tree1)
Prediction1 <- confusionMatrix(tree1)
print(Prediction1)
cf <- as.data.frame(as.table(Prediction1$table))
corrPred = sum(cf[1,3],cf[4,3])
accuracy[i] = corrPred
time_taken1 <- end.time1 -start.time1
time_taken1
time[i] <- time_taken1
}
sum(accuracy)/30
sum(time)/30
data_matrix$age <- as.numeric(data_matrix$age)
data_matrix$anaemia <- as.factor(data_matrix$anaemia)
data_matrix$creatinine_phosphokinase <- as.numeric(data_matrix$creatinine_phosphokinase)
data_matrix$diabetes <- as.factor(data_matrix$diabetes)
data_matrix$ejection_fraction <- as.numeric(data_matrix$ejection_fraction)
data_matrix$high_blood_pressure <- as.factor(data_matrix$high_blood_pressure)
data_matrix$platelets <- as.numeric(data_matrix$platelets)
data_matrix$serum_creatinine <- as.numeric(data_matrix$serum_creatinine)
data_matrix$serum_sodium <- as.numeric(data_matrix$serum_sodium)
data_matrix$sex <- as.factor(data_matrix$sex)
data_matrix$smoking <- as.factor(data_matrix$smoking)
data_matrix$time <- as.numeric(data_matrix$time)
data_matrix$DEATH_EVENT <- as.factor(data_matrix$DEATH_EVENT)
accuracy = vector("numeric",30)
time = vector("numeric",30)
for (i in 1:2) {
options(digits.secs = 6)
start.time1 <- Sys.time()
train.control <- trainControl(method = 'cv', number = 20)
tree1 <- train(DEATH_EVENT ~. ,data = data_matrix, method = "rpart", trControl = train.control, parms=list(split="gini"))
end.time1 <- Sys.time()
plot(tree1)
Prediction1 <- confusionMatrix(tree1)
print(Prediction1)
cf <- as.data.frame(as.table(Prediction1$table))
corrPred = sum(cf[1,3],cf[4,3])
accuracy[i] = corrPred
time_taken1 <- end.time1 -start.time1
time_taken1
time[i] <- time_taken1
}
sum(accuracy)/30
sum(time)/30
mcc = vector()
mcc = vector("numeric")
View(cf)
View(cf)
for (i in 1:2) {
options(digits.secs = 6)
start.time1 <- Sys.time()
train.control <- trainControl(method = 'cv', number = 20)
tree1 <- train(DEATH_EVENT ~. ,data = data_matrix, method = "rpart", trControl = train.control, parms=list(split="gini"))
end.time1 <- Sys.time()
plot(tree1)
Prediction1 <- confusionMatrix(tree1)
print(Prediction1)
cf <- as.data.frame(as.table(Prediction1))
tp <- cf[1]
tn <- cf[4]
fp <- cf[3]
fn <- cf[2]
corrPred = (tp+tn)/(tp+tn+fp+fn)
accuracy[i] = corrPred/100
mccNum <- (tp*tn)-(fp*fn)
mccDen <- sqrt((tp+fp)*(tp+fn)*(tn+fp)*(tn+fn))
numMcc <- mccNum/mccDen
mcc[i] = numMcc
time_taken1 <- end.time1 -start.time1
time_taken1
time[i] <- time_taken1
}
cf = data.frame()
for (i in 1:2) {
options(digits.secs = 6)
start.time1 <- Sys.time()
train.control <- trainControl(method = 'cv', number = 20)
tree1 <- train(DEATH_EVENT ~. ,data = data_matrix, method = "rpart", trControl = train.control, parms=list(split="gini"))
end.time1 <- Sys.time()
plot(tree1)
Prediction1 <- confusionMatrix(tree1)
print(Prediction1)
cf <- as.data.frame(as.table(Prediction1))
tp <- cf[1]
tn <- cf[4]
fp <- cf[3]
fn <- cf[2]
corrPred = (tp+tn)/(tp+tn+fp+fn)
accuracy[i] = corrPred/100
mccNum <- (tp*tn)-(fp*fn)
mccDen <- sqrt((tp+fp)*(tp+fn)*(tn+fp)*(tn+fn))
numMcc <- mccNum/mccDen
mcc[i] = numMcc
time_taken1 <- end.time1 -start.time1
time_taken1
time[i] <- time_taken1
}
sum(accuracy)/2
sum(time)/2
sum(mcc)/2
for (i in 1:2) {
options(digits.secs = 6)
start.time1 <- Sys.time()
train.control <- trainControl(method = 'cv', number = 20)
tree1 <- train(DEATH_EVENT ~. ,data = data_matrix, method = "rpart", trControl = train.control, parms=list(split="gini"))
end.time1 <- Sys.time()
plot(tree1)
Prediction1 <- confusionMatrix(tree1)
print(Prediction1)
cf <- as.data.frame(as.table(Prediction1))
tp <- cf[1]
tn <- cf[4]
fp <- cf[3]
fn <- cf[2]
corrPred = (tp+tn)/(tp+tn+fp+fn)
accuracy[i] = corrPred/100
mccNum <- (tp*tn)-(fp*fn)
mccDen <- sqrt((tp+fp)*(tp+fn)*(tn+fp)*(tn+fn))
numMcc <- mccNum/mccDen
mcc[i] = numMcc
time_taken1 <- end.time1 -start.time1
time_taken1
time[i] <- time_taken1
}
tree1 <- train(DEATH_EVENT ~. ,data = data_matrix, method = "rpart", trControl = train.control, parms=list(split="gini"))
Prediction1 <- confusionMatrix(tree1)
cf <- as.data.frame(as.table(Prediction1))
cf = data.frame("numeric")
View(cf)
for (i in 1:2) {
options(digits.secs = 6)
start.time1 <- Sys.time()
train.control <- trainControl(method = 'cv', number = 20)
tree1 <- train(DEATH_EVENT ~. ,data = data_matrix, method = "rpart", trControl = train.control, parms=list(split="gini"))
end.time1 <- Sys.time()
plot(tree1)
Prediction1 <- confusionMatrix(tree1)
print(Prediction1)
cf <- as.data.frame(as.table(Prediction1))
tp <- cf[1]
tn <- cf[4]
fp <- cf[3]
fn <- cf[2]
corrPred = (tp+tn)/(tp+tn+fp+fn)
accuracy[i] = corrPred/100
mccNum <- (tp*tn)-(fp*fn)
mccDen <- sqrt((tp+fp)*(tp+fn)*(tn+fp)*(tn+fn))
numMcc <- mccNum/mccDen
mcc[i] = numMcc
time_taken1 <- end.time1 -start.time1
time_taken1
time[i] <- time_taken1
}
cf = matrix()
cf=0
cf = matrix()
cf = matrix("numeric")
for (i in 1:2) {
options(digits.secs = 6)
start.time1 <- Sys.time()
train.control <- trainControl(method = 'cv', number = 20)
tree1 <- train(DEATH_EVENT ~. ,data = data_matrix, method = "rpart", trControl = train.control, parms=list(split="gini"))
end.time1 <- Sys.time()
plot(tree1)
Prediction1 <- confusionMatrix(tree1)
print(Prediction1)
cf <- as.data.frame(as.table(Prediction1))
tp <- cf[1]
tn <- cf[4]
fp <- cf[3]
fn <- cf[2]
corrPred = (tp+tn)/(tp+tn+fp+fn)
accuracy[i] = corrPred/100
mccNum <- (tp*tn)-(fp*fn)
mccDen <- sqrt((tp+fp)*(tp+fn)*(tn+fp)*(tn+fn))
numMcc <- mccNum/mccDen
mcc[i] = numMcc
time_taken1 <- end.time1 -start.time1
time_taken1
time[i] <- time_taken1
}
Prediction1 <- confusionMatrix(tree1)
tree1 <- train(DEATH_EVENT ~. ,data = data_matrix, method = "rpart", trControl = train.control, parms=list(split="gini"))
Prediction1 <- confusionMatrix(tree1)
cf <- as.data.frame(as.table(Prediction1))
View(Prediction1)
cf <- as.table(Prediction1)
View(Prediction1)
cf <- as.table(Prediction1$table)
cf <- as.data.matrix(as.table(Prediction1$table))
cf <- as.data.frame(as.table(Prediction1$table))
View(cf)
accuracy = vector("numeric")
time = vector("numeric")
mcc = vector("numeric")
cf = matrix("numeric")
for (i in 1:2) {
options(digits.secs = 6)
start.time1 <- Sys.time()
train.control <- trainControl(method = 'cv', number = 20)
tree1 <- train(DEATH_EVENT ~. ,data = data_matrix, method = "rpart", trControl = train.control, parms=list(split="gini"))
end.time1 <- Sys.time()
plot(tree1)
Prediction1 <- confusionMatrix(tree1)
print(Prediction1)
cf <- as.data.frame(as.table(Prediction1$table))
tp <- cf[1]
tn <- cf[4]
fp <- cf[3]
fn <- cf[2]
corrPred = (tp+tn)/(tp+tn+fp+fn)
accuracy[i] = corrPred/100
mccNum <- (tp*tn)-(fp*fn)
mccDen <- sqrt((tp+fp)*(tp+fn)*(tn+fp)*(tn+fn))
numMcc <- mccNum/mccDen
mcc[i] = numMcc
time_taken1 <- end.time1 -start.time1
time_taken1
time[i] <- time_taken1
}
tree1 <- train(DEATH_EVENT ~. ,data = data_matrix, method = "rpart", trControl = train.control, parms=list(split="gini"))
Prediction1 <- confusionMatrix(tree1)
print(Prediction1)
cf <- as.data.frame(as.table(Prediction1$table))
tp <- cf[1]
tn <- cf[4]
tp <- cf[1,3]
tn <- cf[4,3]
fp <- cf[3,3]
fn <- cf[2,3]
corrPred = (tp+tn)/(tp+tn+fp+fn)
accuracy[i] = corrPred/100
for (i in 1:2) {
options(digits.secs = 6)
start.time1 <- Sys.time()
train.control <- trainControl(method = 'cv', number = 20)
tree1 <- train(DEATH_EVENT ~. ,data = data_matrix, method = "rpart", trControl = train.control, parms=list(split="gini"))
end.time1 <- Sys.time()
plot(tree1)
Prediction1 <- confusionMatrix(tree1)
print(Prediction1)
cf <- as.data.frame(as.table(Prediction1$table))
tp <- cf[1,3]
tn <- cf[4,3]
fp <- cf[3,3]
fn <- cf[2,3]
corrPred = (tp+tn)/(tp+tn+fp+fn)
accuracy[i] = corrPred/100
mccNum <- (tp*tn)-(fp*fn)
mccDen <- sqrt((tp+fp)*(tp+fn)*(tn+fp)*(tn+fn))
numMcc <- mccNum/mccDen
mcc[i] = numMcc
time_taken1 <- end.time1 -start.time1
time_taken1
time[i] <- time_taken1
}
View(cf)
sum(accuracy)/2
sum(time)/2
sum(mcc)/2
for (i in 1:2) {
options(digits.secs = 6)
start.time1 <- Sys.time()
tree2 <- J48(DEATH_EVENT~., data = data_matrix)
e <- evaluate_Weka_classifier(tree2, numFolds = 20, class = TRUE)
end.time1 <- Sys.time()
cf <- as.data.frame(as.table(Prediction1$table))
tp <- cf[1,3]
tn <- cf[4,3]
fp <- cf[3,3]
fn <- cf[2,3]
corrPred = (tp+tn)/(tp+tn+fp+fn)
accuracy[i] = corrPred/100
mccNum <- (tp*tn)-(fp*fn)
mccDen <- sqrt((tp+fp)*(tp+fn)*(tn+fp)*(tn+fn))
numMcc <- mccNum/mccDen
mcc[i] = numMcc
time_taken1 <- end.time1 -start.time1
time_taken1
time[i] <- time_taken1
}
sum(accuracy)/2
sum(time)/2
sum(mcc)/2
for (i in 1:2) {
options(digits.secs = 6)
start.time1 <- Sys.time()
tree2 <- J48(DEATH_EVENT~., data = data_matrix)
e <- evaluate_Weka_classifier(tree2, numFolds = 20, class = TRUE)
end.time1 <- Sys.time()
cf <- as.data.frame(as.table(Prediction1$table))
tp <- cf[1,3]
tn <- cf[4,3]
fp <- cf[3,3]
fn <- cf[2,3]
corrPred = (tp+tn)/(tp+tn+fp+fn)
accuracy[i] = corrPred
mccNum <- (tp*tn)-(fp*fn)
mccDen <- sqrt((tp+fp)*(tp+fn)*(tn+fp)*(tn+fn))
numMcc <- mccNum/mccDen
mcc[i] = numMcc
time_taken1 <- end.time1 -start.time1
time_taken1
time[i] <- time_taken1
}
sum(accuracy)/2
sum(time)/2
sum(mcc)/2
accuracy = vector("numeric")
time = vector("numeric")
mcc = vector("numeric")
cf = matrix("numeric")
for (i in 1:2) {
options(digits.secs = 6)
start.time1 <- Sys.time()
train.control <- trainControl(method = 'cv', number = 20)
tree1 <- train(DEATH_EVENT ~. ,data = data_matrix, method = "rpart", trControl = train.control, parms=list(split="information"))
end.time1 <- Sys.time()
plot(tree1)
Prediction1 <- confusionMatrix(tree1)
print(Prediction1)
cf <- as.data.frame(as.table(Prediction1$table))
tp <- cf[1,3]
tn <- cf[4,3]
fp <- cf[3,3]
fn <- cf[2,3]
corrPred = (tp+tn)/(tp+tn+fp+fn)
accuracy[i] = corrPred/100
mccNum <- (tp*tn)-(fp*fn)
mccDen <- sqrt((tp+fp)*(tp+fn)*(tn+fp)*(tn+fn))
numMcc <- mccNum/mccDen
mcc[i] = numMcc
time_taken1 <- end.time1 -start.time1
time_taken1
time[i] <- time_taken1
}
sum(accuracy)/2
sum(time)/2
sum(mcc)/2
accuracy = vector("numeric",30)
time = vector("numeric",30)
for (i in 1:2) {
options(digits.secs = 6)
start.time1 <- Sys.time()
tree2 <- J48(DEATH_EVENT~., data = data_matrix)
e <- evaluate_Weka_classifier(tree2, numFolds = 20, class = TRUE)
end.time1 <- Sys.time()
cf <- as.data.frame(as.table(Prediction1$table))
tp <- cf[1,3]
tn <- cf[4,3]
fp <- cf[3,3]
fn <- cf[2,3]
corrPred = (tp+tn)/(tp+tn+fp+fn)
accuracy[i] = corrPred
mccNum <- (tp*tn)-(fp*fn)
mccDen <- sqrt((tp+fp)*(tp+fn)*(tn+fp)*(tn+fn))
numMcc <- mccNum/mccDen
mcc[i] = numMcc
time_taken1 <- end.time1 -start.time1
time_taken1
time[i] <- time_taken1
}
sum(accuracy)/2
sum(time)/2
sum(mcc)/2
cat("\f")       # Clear old outputs
rm(list=ls())   # Clear all variables
data <- file.choose()
data_matrix <- read.csv(data, header = TRUE, sep = ",", na.strings=c("","NA"))
# Transforming Variables #
for (i in 1:2) {
data_matrix[,i] <- as.numeric(data_matrix[,i])
}
for (i in 3:12) {
data_matrix[,i] <- as.factor(data_matrix[,i])
}
View(data_matrix)
accuracy = vector("numeric")
time = vector("numeric")
mcc = vector("numeric")
cf = matrix("numeric")
for (i in 1:30) {
options(digits.secs = 6)
start.time1 <- Sys.time()
train.control <- trainControl(method = 'cv', number = 20)
tree1 <- train(Diagnosis ~. ,data = data_matrix, method = "rpart", trControl = train.control, parms=list(split="gini"))
end.time1 <- Sys.time()
Prediction1 <- confusionMatrix(tree1)
print(Prediction1)
cf <- as.data.frame(as.table(Prediction1$table))
tp <- cf[1,3]
tn <- cf[4,3]
fp <- cf[3,3]
fn <- cf[2,3]
corrPred = (tp+tn)/(tp+tn+fp+fn)
accuracy[i] = corrPred/100
mccNum <- (tp*tn)-(fp*fn)
mccDen <- sqrt((tp+fp)*(tp+fn)*(tn+fp)*(tn+fn))
numMcc <- mccNum/mccDen
mcc[i] = numMcc
time_taken1 <- end.time1 -start.time1
time_taken1
time[i] <- time_taken1
}
sum(accuracy)/30
sum(time)/30
sum(mcc)/30
View(cf)
for (i in 1:30) {
options(digits.secs = 6)
start.time1 <- Sys.time()
train.control <- trainControl(method = 'cv', number = 20)
tree1 <- train(Diagnosis ~. ,data = data_matrix, method = "rpart", trControl = train.control, parms=list(split="gini"))
end.time1 <- Sys.time()
Prediction1 <- confusionMatrix(tree1)
print(Prediction1)
cf <- as.data.frame(as.table(Prediction1$table))
tp <- cf[1,3]
tn <- cf[4,3]
fp <- cf[3,3]
fn <- cf[2,3]
corrPred = (tp+tn)/(tp+tn+fp+fn)
accuracy[i] = corrPred
mccNum <- (tp*tn)-(fp*fn)
mccDen <- sqrt((tp+fp)*(tp+fn)*(tn+fp)*(tn+fn))
numMcc <- mccNum/mccDen
mcc[i] = numMcc
time_taken1 <- end.time1 -start.time1
time_taken1
time[i] <- time_taken1
}
sum(accuracy)/30
cat("\f")       # Clear old outputs
rm(list=ls())   # Clear all variables
data1 <- file.choose()
data1
data_matrix <- read.csv(data1, header = TRUE, sep = ",")
data_matrix$age <- as.numeric(data_matrix$age)
data_matrix$anaemia <- as.factor(data_matrix$anaemia)
data_matrix$creatinine_phosphokinase <- as.numeric(data_matrix$creatinine_phosphokinase)
data_matrix$diabetes <- as.factor(data_matrix$diabetes)
data_matrix$ejection_fraction <- as.numeric(data_matrix$ejection_fraction)
data_matrix$high_blood_pressure <- as.factor(data_matrix$high_blood_pressure)
data_matrix$platelets <- as.numeric(data_matrix$platelets)
data_matrix$serum_creatinine <- as.numeric(data_matrix$serum_creatinine)
data_matrix$serum_sodium <- as.numeric(data_matrix$serum_sodium)
data_matrix$sex <- as.factor(data_matrix$sex)
data_matrix$smoking <- as.factor(data_matrix$smoking)
data_matrix$time <- as.numeric(data_matrix$time)
data_matrix$DEATH_EVENT <- as.factor(data_matrix$DEATH_EVENT)
accuracy = vector("numeric")
time = vector("numeric")
mcc = vector("numeric")
cf = matrix("numeric")
for (i in 1:30) {
options(digits.secs = 6)
start.time1 <- Sys.time()
train.control <- trainControl(method = 'cv', number = 20)
tree1 <- train(DEATH_EVENT ~. ,data = data_matrix, method = "rpart", trControl = train.control, parms=list(split="gini"))
end.time1 <- Sys.time()
Prediction1 <- confusionMatrix(tree1)
print(Prediction1)
cf <- as.data.frame(as.table(Prediction1$table))
tp <- cf[1,3]
tn <- cf[4,3]
fp <- cf[3,3]
fn <- cf[2,3]
corrPred = (tp+tn)/(tp+tn+fp+fn)
accuracy[i] = corrPred/100
mccNum <- (tp*tn)-(fp*fn)
mccDen <- sqrt((tp+fp)*(tp+fn)*(tn+fp)*(tn+fn))
numMcc <- mccNum/mccDen
mcc[i] = numMcc
time_taken1 <- end.time1 -start.time1
time_taken1
time[i] <- time_taken1
}
mean(accuracy)
mean(mcc)
mean(time)
View(tree1)
View(Prediction1)
