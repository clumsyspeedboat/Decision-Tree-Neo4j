data1 <- file.choose()
data1
data_matrix <- read.csv(data1, header = TRUE, sep = ",")
View(data_matrix)
data1 <- file.choose()
data1
data_matrix <- read.csv(data1, header = TRUE, sep = ",")
training_size <- 0.5 #extracting Percentage
n = nrow(data_matrix)
smp_size <- floor(training_size * n)  #ask from the user
index<- sample(seq_len(n),size = smp_size)
# Breaking into Training and Testing Sets:
TrainingSet <- data_matrix_new_abc[index,]
TestingSet <- data_matrix_new_abc[-index,]
barchart(TrainingSet$Patient.Type)
barchart(TestingSet$Patient.Type)
training_size <- 0.5 #extracting Percentage
n = nrow(data_matrix)
smp_size <- floor(training_size * n)  #ask from the user
index<- sample(seq_len(n),size = smp_size)
# Breaking into Training and Testing Sets:
TrainingSet <- data_matrix[index,]
TestingSet <- data_matrix[-index,]
barchart(TrainingSet$Patient.Type)
barchart(TestingSet$Patient.Type)
barplot(TrainingSet$Patient.Type)
barplot(TestingSet$Patient.Type)
TrainingSet$Patient.Type <- as.factor(TrainingSet$Patient.Type)
TestingSet$Patient.Type <- as.factor(TestingSet$Patient.Type)
barplot(TestingSet$Patient.Type)
plot(TrainingSet$Patient.Type)
plot(TestingSet$Patient.Type)
n <- NCOL(TrainingSet)
for (i in 1:(n-1)) {
TrainingSet[,i] <- as.numeric(TrainingSet[,i])
}
TestingSet$Patient.Type <- as.factor(TestingSet$Patient.Type)
for (i in 1:(n-1)) {
TestingSet[,i] <- as.numeric(TestingSet[,i])
}
options(digits.secs = 6)
start.time1 <- Sys.time()
tree1 <- rpart(Patient.Type ~.,data=TrainingSet, method = 'class', parms = list(split = "gini"))
end.time1 <- Sys.time()
rpart.plot(tree1)
start.time2 <- Sys.time()
Prediction1 <- predict(tree1, newdata=TestingSet,type = 'class')
end.time2 <- Sys.time()
# Confusion Matrix #
levels <- levels(Prediction1)
levels <- levels[order(levels)]
cm1 <- table(ordered(Prediction1,levels), ordered(TestingSet$Patient.Type, levels))
cm1
time_taken1 <- end.time1 -start.time1
time_taken2 <- end.time2 -start.time2
time_taken1
time_taken2
library("factoextra")
library("FSelector")
library("DescTools")
library("rpart")
library("rpart.plot")
library("C50")
library("RWeka")
options(digits.secs = 6)
start.time1 <- Sys.time()
tree1 <- rpart(Patient.Type ~.,data=TrainingSet, method = 'class', parms = list(split = "gini"))
end.time1 <- Sys.time()
rpart.plot(tree1)
start.time2 <- Sys.time()
Prediction1 <- predict(tree1, newdata=TestingSet,type = 'class')
end.time2 <- Sys.time()
# Confusion Matrix #
levels <- levels(Prediction1)
levels <- levels[order(levels)]
cm1 <- table(ordered(Prediction1,levels), ordered(TestingSet$Patient.Type, levels))
cm1
time_taken1 <- end.time1 -start.time1
time_taken2 <- end.time2 -start.time2
time_taken1
time_taken2
training_size <- 0.5 #extracting Percentage
n = nrow(data_matrix)
smp_size <- floor(training_size * n)  #ask from the user
index<- sample(seq_len(n),size = smp_size)
# Breaking into Training and Testing Sets:
TrainingSet <- data_matrix[index,]
TestingSet <- data_matrix[-index,]
TrainingSet$Patient.Type <- as.factor(TrainingSet$Patient.Type)
TestingSet$Patient.Type <- as.factor(TestingSet$Patient.Type)
n <- NCOL(TrainingSet)
for (i in 1:(n-1)) {
TrainingSet[,i] <- as.numeric(TrainingSet[,i])
}
TestingSet$Patient.Type <- as.factor(TestingSet$Patient.Type)
for (i in 1:(n-1)) {
TestingSet[,i] <- as.numeric(TestingSet[,i])
}
options(digits.secs = 6)
start.time1 <- Sys.time()
tree1 <- rpart(Patient.Type ~.,data=TrainingSet, method = 'class', parms = list(split = "gini"))
end.time1 <- Sys.time()
rpart.plot(tree1)
start.time2 <- Sys.time()
Prediction1 <- predict(tree1, newdata=TestingSet,type = 'class')
end.time2 <- Sys.time()
# Confusion Matrix #
levels <- levels(Prediction1)
levels <- levels[order(levels)]
cm1 <- table(ordered(Prediction1,levels), ordered(TestingSet$Patient.Type, levels))
cm1
time_taken1 <- end.time1 -start.time1
time_taken2 <- end.time2 -start.time2
time_taken1
time_taken2
training_size <- 0.5 #extracting Percentage
n = nrow(data_matrix)
smp_size <- floor(training_size * n)  #ask from the user
index<- sample(seq_len(n),size = smp_size)
# Breaking into Training and Testing Sets:
TrainingSet <- data_matrix[index,]
TestingSet <- data_matrix[-index,]
options(digits.secs = 6)
start.time1 <- Sys.time()
tree1 <- rpart(Patient.Type ~.,data=TrainingSet, method = 'class', parms = list(split = "gini"))
end.time1 <- Sys.time()
rpart.plot(tree1)
start.time2 <- Sys.time()
Prediction1 <- predict(tree1, newdata=TestingSet,type = 'class')
end.time2 <- Sys.time()
# Confusion Matrix #
levels <- levels(Prediction1)
levels <- levels[order(levels)]
cm1 <- table(ordered(Prediction1,levels), ordered(TestingSet$Patient.Type, levels))
cm1
time_taken1 <- end.time1 -start.time1
time_taken2 <- end.time2 -start.time2
time_taken1
time_taken2
training_size <- 0.5 #extracting Percentage
n = nrow(data_matrix)
smp_size <- floor(training_size * n)  #ask from the user
index<- sample(seq_len(n),size = smp_size)
# Breaking into Training and Testing Sets:
TrainingSet <- data_matrix[index,]
TestingSet <- data_matrix[-index,]
options(digits.secs = 6)
start.time1 <- Sys.time()
tree1 <- rpart(Patient.Type ~.,data=TrainingSet, method = 'class', parms = list(split = "gini"))
end.time1 <- Sys.time()
rpart.plot(tree1)
start.time2 <- Sys.time()
Prediction1 <- predict(tree1, newdata=TestingSet,type = 'class')
end.time2 <- Sys.time()
# Confusion Matrix #
levels <- levels(Prediction1)
levels <- levels[order(levels)]
cm1 <- table(ordered(Prediction1,levels), ordered(TestingSet$Patient.Type, levels))
cm1
time_taken1 <- end.time1 -start.time1
time_taken2 <- end.time2 -start.time2
time_taken1
time_taken2
training_size <- 0.5 #extracting Percentage
n = nrow(data_matrix)
smp_size <- floor(training_size * n)  #ask from the user
index<- sample(seq_len(n),size = smp_size)
# Breaking into Training and Testing Sets:
TrainingSet <- data_matrix[index,]
TestingSet <- data_matrix[-index,]
options(digits.secs = 6)
start.time1 <- Sys.time()
tree1 <- rpart(Patient.Type ~.,data=TrainingSet, method = 'class', parms = list(split = "gini"))
end.time1 <- Sys.time()
rpart.plot(tree1)
start.time2 <- Sys.time()
Prediction1 <- predict(tree1, newdata=TestingSet,type = 'class')
end.time2 <- Sys.time()
# Confusion Matrix #
levels <- levels(Prediction1)
levels <- levels[order(levels)]
cm1 <- table(ordered(Prediction1,levels), ordered(TestingSet$Patient.Type, levels))
cm1
time_taken1 <- end.time1 -start.time1
time_taken2 <- end.time2 -start.time2
time_taken1
time_taken2
training_size <- 0.5 #extracting Percentage
n = nrow(data_matrix)
smp_size <- floor(training_size * n)  #ask from the user
index<- sample(seq_len(n),size = smp_size)
# Breaking into Training and Testing Sets:
TrainingSet <- data_matrix[index,]
TestingSet <- data_matrix[-index,]
options(digits.secs = 6)
start.time1 <- Sys.time()
tree1 <- rpart(Patient.Type ~.,data=TrainingSet, method = 'class', parms = list(split = "gini"))
end.time1 <- Sys.time()
rpart.plot(tree1)
start.time2 <- Sys.time()
Prediction1 <- predict(tree1, newdata=TestingSet,type = 'class')
end.time2 <- Sys.time()
# Confusion Matrix #
levels <- levels(Prediction1)
levels <- levels[order(levels)]
cm1 <- table(ordered(Prediction1,levels), ordered(TestingSet$Patient.Type, levels))
cm1
time_taken1 <- end.time1 -start.time1
time_taken2 <- end.time2 -start.time2
time_taken1
time_taken2
training_size <- 0.5 #extracting Percentage
n = nrow(data_matrix)
smp_size <- floor(training_size * n)  #ask from the user
index<- sample(seq_len(n),size = smp_size)
# Breaking into Training and Testing Sets:
TrainingSet <- data_matrix[index,]
TestingSet <- data_matrix[-index,]
training_size <- 0.5 #extracting Percentage
n = nrow(data_matrix)
smp_size <- floor(training_size * n)  #ask from the user
index<- sample(seq_len(n),size = smp_size)
# Breaking into Training and Testing Sets:
TrainingSet <- data_matrix[index,]
TestingSet <- data_matrix[-index,]
training_size <- 0.5 #extracting Percentage
n = nrow(data_matrix)
smp_size <- floor(training_size * n)  #ask from the user
index<- sample(seq_len(n),size = smp_size)
# Breaking into Training and Testing Sets:
TrainingSet <- data_matrix[index,]
TestingSet <- data_matrix[-index,]
options(digits.secs = 6)
start.time1 <- Sys.time()
tree1 <- rpart(Patient.Type ~.,data=TrainingSet, method = 'class', parms = list(split = "gini"))
end.time1 <- Sys.time()
rpart.plot(tree1)
start.time2 <- Sys.time()
Prediction1 <- predict(tree1, newdata=TestingSet,type = 'class')
end.time2 <- Sys.time()
# Confusion Matrix #
levels <- levels(Prediction1)
levels <- levels[order(levels)]
cm1 <- table(ordered(Prediction1,levels), ordered(TestingSet$Patient.Type, levels))
cm1
time_taken1 <- end.time1 -start.time1
time_taken2 <- end.time2 -start.time2
time_taken1
time_taken2
TrainingSet$Patient.Type <- as.factor(TrainingSet$Patient.Type)
TestingSet$Patient.Type <- as.factor(TestingSet$Patient.Type)
n <- NCOL(TrainingSet)
for (i in 1:(n-1)) {
TrainingSet[,i] <- as.numeric(TrainingSet[,i])
}
TestingSet$Patient.Type <- as.factor(TestingSet$Patient.Type)
for (i in 1:(n-1)) {
TestingSet[,i] <- as.numeric(TestingSet[,i])
}
options(digits.secs = 6)
start.time1 <- Sys.time()
tree1 <- rpart(Patient.Type ~.,data=TrainingSet, method = 'class', parms = list(split = "gini"))
end.time1 <- Sys.time()
rpart.plot(tree1)
start.time2 <- Sys.time()
Prediction1 <- predict(tree1, newdata=TestingSet,type = 'class')
end.time2 <- Sys.time()
# Confusion Matrix #
levels <- levels(Prediction1)
levels <- levels[order(levels)]
cm1 <- table(ordered(Prediction1,levels), ordered(TestingSet$Patient.Type, levels))
cm1
time_taken1 <- end.time1 -start.time1
time_taken2 <- end.time2 -start.time2
time_taken1
time_taken2
training_size <- 0.5 #extracting Percentage
n = nrow(data_matrix)
smp_size <- floor(training_size * n)  #ask from the user
index<- sample(seq_len(n),size = smp_size)
# Breaking into Training and Testing Sets:
TrainingSet <- data_matrix[index,]
TestingSet <- data_matrix[-index,]
options(digits.secs = 6)
start.time1 <- Sys.time()
tree1 <- rpart(Patient.Type ~.,data=TrainingSet, method = 'class', parms = list(split = "gini"))
end.time1 <- Sys.time()
rpart.plot(tree1)
start.time2 <- Sys.time()
Prediction1 <- predict(tree1, newdata=TestingSet,type = 'class')
end.time2 <- Sys.time()
# Confusion Matrix #
levels <- levels(Prediction1)
levels <- levels[order(levels)]
cm1 <- table(ordered(Prediction1,levels), ordered(TestingSet$Patient.Type, levels))
cm1
time_taken1 <- end.time1 -start.time1
time_taken2 <- end.time2 -start.time2
time_taken1
time_taken2
training_size <- 0.5 #extracting Percentage
n = nrow(data_matrix)
smp_size <- floor(training_size * n)  #ask from the user
index<- sample(seq_len(n),size = smp_size)
# Breaking into Training and Testing Sets:
TrainingSet <- data_matrix[index,]
TestingSet <- data_matrix[-index,]
training_size <- 0.5 #extracting Percentage
n = nrow(data_matrix)
smp_size <- floor(training_size * n)  #ask from the user
index<- sample(seq_len(n),size = smp_size)
# Breaking into Training and Testing Sets:
TrainingSet <- data_matrix[index,]
TestingSet <- data_matrix[-index,]
options(digits.secs = 6)
start.time1 <- Sys.time()
tree1 <- rpart(Patient.Type ~.,data=TrainingSet, method = 'class', parms = list(split = "gini"))
end.time1 <- Sys.time()
rpart.plot(tree1)
start.time2 <- Sys.time()
Prediction1 <- predict(tree1, newdata=TestingSet,type = 'class')
end.time2 <- Sys.time()
# Confusion Matrix #
levels <- levels(Prediction1)
levels <- levels[order(levels)]
cm1 <- table(ordered(Prediction1,levels), ordered(TestingSet$Patient.Type, levels))
cm1
time_taken1 <- end.time1 -start.time1
time_taken2 <- end.time2 -start.time2
time_taken1
time_taken2
training_size <- 0.5 #extracting Percentage
n = nrow(data_matrix)
smp_size <- floor(training_size * n)  #ask from the user
index<- sample(seq_len(n),size = smp_size)
# Breaking into Training and Testing Sets:
TrainingSet <- data_matrix[index,]
TestingSet <- data_matrix[-index,]
options(digits.secs = 6)
start.time1 <- Sys.time()
tree1 <- rpart(Patient.Type ~.,data=TrainingSet, method = 'class', parms = list(split = "gini"))
end.time1 <- Sys.time()
rpart.plot(tree1)
start.time2 <- Sys.time()
Prediction1 <- predict(tree1, newdata=TestingSet,type = 'class')
end.time2 <- Sys.time()
# Confusion Matrix #
levels <- levels(Prediction1)
levels <- levels[order(levels)]
cm1 <- table(ordered(Prediction1,levels), ordered(TestingSet$Patient.Type, levels))
cm1
time_taken1 <- end.time1 -start.time1
time_taken2 <- end.time2 -start.time2
time_taken1
time_taken2
write.csv(TrainingSet, file = "Training Set.csv", row.names = "False")
write.csv(TrainingSet, file = "Training Set.csv", header = "False")
write.csv(TrainingSet, file = "Training Set.csv", row.names = F)
write.csv(TestingSet, file = "Testing Set.csv", row.names = F)
TrainingSet = read.csv(file.choose(), header = TRUE, sep = ",")
TestingSet = read.csv(file.choose(), header = TRUE, sep = ",")
## Transform Variables ##
TrainingSet$Patient.Type <- as.factor(TrainingSet$Patient.Type)
TestingSet$Patient.Type <- as.factor(TestingSet$Patient.Type)
n <- NCOL(TrainingSet)
for (i in 1:(n-1)) {
TrainingSet[,i] <- as.numeric(TrainingSet[,i])
}
TestingSet$Patient.Type <- as.factor(TestingSet$Patient.Type)
for (i in 1:(n-1)) {
TestingSet[,i] <- as.numeric(TestingSet[,i])
}
options(digits.secs = 6)
start.time1 <- Sys.time()
tree1 <- rpart(Patient.Type ~.,data=TrainingSet, method = 'class', parms = list(split = "gini"))
end.time1 <- Sys.time()
rpart.plot(tree1)
start.time2 <- Sys.time()
Prediction1 <- predict(tree1, newdata=TestingSet,type = 'class')
end.time2 <- Sys.time()
# Confusion Matrix #
levels <- levels(Prediction1)
levels <- levels[order(levels)]
cm1 <- table(ordered(Prediction1,levels), ordered(TestingSet$Patient.Type, levels))
cm1
time_taken1 <- end.time1 -start.time1
time_taken2 <- end.time2 -start.time2
time_taken1
time_taken2
library("factoextra")
library("caret")
library("FSelector")
library("DescTools")
library("rpart")
library("rpart.plot")
library("C50")
library("RWeka")
data1 <- file.choose()
data1
data_matrix <- read.csv(data1, header = TRUE, sep = ",")
data_matrix[,1:50] <- as.numeric(unlist(data_matrix[,1:50]))
data_matrix[,51] <- as.factor(data_matrix[,51])
accuracy <- vector("numeric", 30)
time <- vector("numeric", 30)
accuracy = 0
time = 0
for (i in 1:30) {
options(digits.secs = 6)
start.time1 <- Sys.time()
train.control <- trainControl(method = 'cv', number = 10)
tree1 <- train(Patient.Type ~. ,data = data_matrix, method = "rpart", trControl = train.control, parms=list(split="gini"))
end.time1 <- Sys.time()
plot(tree1)
Prediction1 <- confusionMatrix(tree1)
print(Prediction1)
cf <- as.data.frame(as.table(Prediction1$table))
corrPred = sum(cf[1,3],cf[4,3])
accuracy[i] = corrPred
time_taken1 <- end.time1 -start.time1
time_taken1
time[i] <- time_taken1
}
sum(accuracy)/30
sum(time)/30
View(data_matrix)
accuracy <- vector("numeric", 30)
time <- vector("numeric", 30)
accuracy = 0
time = 0
for (i in 1:30) {
options(digits.secs = 6)
start.time1 <- Sys.time()
train.control <- trainControl(method = 'cv', number = 10)
tree1 <- train(Patient_Type ~. ,data = data_matrix, method = "rpart", trControl = train.control, parms=list(split="gini"))
end.time1 <- Sys.time()
plot(tree1)
Prediction1 <- confusionMatrix(tree1)
print(Prediction1)
cf <- as.data.frame(as.table(Prediction1$table))
corrPred = sum(cf[1,3],cf[4,3])
accuracy[i] = corrPred
time_taken1 <- end.time1 -start.time1
time_taken1
time[i] <- time_taken1
}
sum(accuracy)/30
sum(time)/30
accuracy <- vector("numeric", 30)
time <- vector("numeric", 30)
for (i in 1:30) {
options(digits.secs = 6)
start.time1 <- Sys.time()
tree2 <- J48(Patient_Type~., data = data_matrix)
e <- evaluate_Weka_classifier(tree2, numFolds = 10, class = TRUE)
end.time1 <- Sys.time()
cf <- as.data.frame(as.table(e$confusionMatrix))
a <- sum(cf[1,3],cf[4,3])
b <- sum(cf[1,3],cf[2,3],cf[3,3],cf[4,3])
corrPred = (a/b)*100
accuracy[i] = corrPred
time_taken1 <- end.time1 -start.time1
time_taken1
time[i] <- time_taken1
}
sum(accuracy)/30
sum(time)/30
accuracy <- vector("numeric", 30)
time <- vector("numeric", 30)
accuracy = 0
time = 0
for (i in 1:30) {
options(digits.secs = 6)
start.time1 <- Sys.time()
train.control <- trainControl(method = 'cv', number = 10)
tree1 <- train(Patient_Type ~. ,data = data_matrix, method = "rpart", trControl = train.control, parms=list(split="gini"))
end.time1 <- Sys.time()
plot(tree1)
Prediction1 <- confusionMatrix(tree1)
print(Prediction1)
cf <- as.data.frame(as.table(Prediction1$table))
corrPred = sum(cf[1,3],cf[4,3])
accuracy[i] = corrPred
time_taken1 <- end.time1 -start.time1
time_taken1
time[i] <- time_taken1
}
sum(accuracy)/30
sum(time)/30
accuracy <- vector("numeric", 30)
time <- vector("numeric", 30)
for (i in 1:30) {
options(digits.secs = 6)
start.time1 <- Sys.time()
tree2 <- J48(Patient_Type~., data = data_matrix)
e <- evaluate_Weka_classifier(tree2, numFolds = 10, class = TRUE)
end.time1 <- Sys.time()
cf <- as.data.frame(as.table(e$confusionMatrix))
a <- sum(cf[1,3],cf[4,3])
b <- sum(cf[1,3],cf[2,3],cf[3,3],cf[4,3])
corrPred = (a/b)*100
accuracy[i] = corrPred
time_taken1 <- end.time1 -start.time1
time_taken1
time[i] <- time_taken1
}
sum(accuracy)/30
sum(time)/30
